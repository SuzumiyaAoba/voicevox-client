/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Portal Page
     * @description ポータルページを返します。
     */
    get: operations['get_portal_page'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/accent_phrases': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * テキストからアクセント句を得る
     * @description テキストからアクセント句を得ます。
     *
     *     is_kanaが`true`のとき、テキストは次のAquesTalk 風記法で解釈されます。デフォルトは`false`です。
     *     * 全てのカナはカタカナで記述される
     *     * アクセント句は`/`または`、`で区切る。`、`で区切った場合に限り無音区間が挿入される。
     *     * カナの手前に`_`を入れるとそのカナは無声化される
     *     * アクセント位置を`'`で指定する。全てのアクセント句にはアクセント位置を1つ指定する必要がある。
     *     * アクセント句末に`？`(全角)を入れることにより疑問文の発音ができる。
     *     enable_katakana_englishが`true`のとき、テキスト中の読みが不明な英単語をカタカナ読みにします。デフォルトは`true`です。
     *     is_kanaが`true`のとき、enable_katakana_englishの値は無視されます。
     */
    post: operations['accent_phrases'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/add_preset': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Add Preset
     * @description 新しいプリセットを追加します。
     */
    post: operations['add_preset'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/audio_query': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 音声合成用のクエリを作成する
     * @description 音声合成用のクエリの初期値を得ます。ここで得られたクエリはそのまま音声合成に利用できます。各値の意味は`Schemas`を参照してください。
     */
    post: operations['audio_query'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/audio_query_from_preset': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 音声合成用のクエリをプリセットを用いて作成する
     * @description 音声合成用のクエリの初期値を得ます。ここで得られたクエリはそのまま音声合成に利用できます。各値の意味は`Schemas`を参照してください。
     */
    post: operations['audio_query_from_preset'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/cancellable_synthesis': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 音声合成する（キャンセル可能） */
    post: operations['cancellable_synthesis'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/connect_waves': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * base64エンコードされた複数のwavデータを一つに結合する
     * @description base64エンコードされたwavデータを一纏めにし、wavファイルで返します。
     */
    post: operations['connect_waves'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/core_versions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Core Versions
     * @description 利用可能なコアのバージョン一覧を取得します。
     */
    get: operations['core_versions'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/delete_preset': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Delete Preset
     * @description 既存のプリセットを削除します。
     */
    post: operations['delete_preset'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/downloadable_libraries': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Downloadable Libraries
     * @description ダウンロード可能な音声ライブラリの情報を返します。
     */
    get: operations['downloadable_libraries'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/engine_manifest': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Engine Manifest
     * @description エンジンマニフェストを取得します。
     */
    get: operations['engine_manifest'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/frame_synthesis': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Frame Synthesis
     * @description 歌唱音声合成を行います。
     */
    post: operations['frame_synthesis'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/import_user_dict': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Import User Dict Words
     * @description 他のユーザー辞書をインポートします。
     */
    post: operations['import_user_dict_words'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/initialize_speaker': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Initialize Speaker
     * @description 指定されたスタイルを初期化します。
     *
     *     実行しなくても他のAPIは使用できますが、初回実行時に時間がかかることがあります。
     */
    post: operations['initialize_speaker'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/install_library/{library_uuid}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Install Library
     * @description 音声ライブラリをインストールします。
     *
     *     音声ライブラリのZIPファイルをリクエストボディとして送信してください。
     */
    post: operations['install_library'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/installed_libraries': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Installed Libraries
     * @description インストールした音声ライブラリの情報を返します。
     */
    get: operations['installed_libraries'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/is_initialized_speaker': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Is Initialized Speaker
     * @description 指定されたスタイルが初期化されているかどうかを返します。
     */
    get: operations['is_initialized_speaker'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/mora_data': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** アクセント句から音素の長さと音高を得る */
    post: operations['mora_data'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/mora_length': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** アクセント句から音素の長さを得る */
    post: operations['mora_length'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/mora_pitch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** アクセント句から音高を得る */
    post: operations['mora_pitch'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/morphable_targets': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 指定したスタイルに対してエンジン内のキャラクターがモーフィングが可能か判定する
     * @description 指定されたベーススタイルに対してエンジン内の各キャラクターがモーフィング機能を利用可能か返します。
     *
     *     モーフィングの許可/禁止は`/speakers`の`speaker.supported_features.synthesis_morphing`に記載されています。
     *     プロパティが存在しない場合は、モーフィングが許可されているとみなします。
     *     返り値のスタイルIDはstring型なので注意。
     */
    post: operations['morphable_targets'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/multi_synthesis': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 複数まとめて音声合成する */
    post: operations['multi_synthesis'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/presets': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Presets
     * @description エンジンが保持しているプリセットの設定を返します。
     */
    get: operations['get_presets'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/setting': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Setting Get
     * @description 設定ページを返します。
     */
    get: operations['setting_get'];
    put?: never;
    /**
     * Setting Post
     * @description 設定を更新します。
     */
    post: operations['setting_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sing_frame_audio_query': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 歌唱音声合成用のクエリを作成する
     * @description 歌唱音声合成用のクエリの初期値を得ます。ここで得られたクエリはそのまま歌唱音声合成に利用できます。各値の意味は`Schemas`を参照してください。
     */
    post: operations['sing_frame_audio_query'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sing_frame_f0': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 楽譜・歌唱音声合成用のクエリからフレームごとの基本周波数を得る */
    post: operations['sing_frame_f0'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sing_frame_volume': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 楽譜・歌唱音声合成用のクエリからフレームごとの音量を得る */
    post: operations['sing_frame_volume'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/singer_info': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Singer Info
     * @description UUID で指定された歌えるキャラクターの情報を返します。
     *
     *     画像や音声はresource_formatで指定した形式で返されます。
     */
    get: operations['singer_info'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/singers': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Singers
     * @description 歌えるキャラクターの情報の一覧を返します。
     */
    get: operations['singers'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/speaker_info': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Speaker Info
     * @description UUID で指定された喋れるキャラクターの情報を返します。
     *
     *     画像や音声はresource_formatで指定した形式で返されます。
     */
    get: operations['speaker_info'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/speakers': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Speakers
     * @description 喋れるキャラクターの情報の一覧を返します。
     */
    get: operations['speakers'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/supported_devices': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Supported Devices
     * @description 対応デバイスの一覧を取得します。
     */
    get: operations['supported_devices'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/synthesis': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 音声合成する */
    post: operations['synthesis'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/synthesis_morphing': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 2種類のスタイルでモーフィングした音声を合成する
     * @description 指定された2種類のスタイルで音声を合成、指定した割合でモーフィングした音声を得ます。
     *
     *     モーフィングの割合は`morph_rate`で指定でき、0.0でベースのスタイル、1.0でターゲットのスタイルに近づきます。
     */
    post: operations['_synthesis_morphing'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/uninstall_library/{library_uuid}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Uninstall Library
     * @description 音声ライブラリをアンインストールします。
     */
    post: operations['uninstall_library'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/update_preset': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Update Preset
     * @description 既存のプリセットを更新します。
     */
    post: operations['update_preset'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/user_dict': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get User Dict Words
     * @description ユーザー辞書に登録されている単語の一覧を返します。
     *
     *     単語の表層形(surface)は正規化済みの物を返します。
     */
    get: operations['get_user_dict_words'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/user_dict_word': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Add User Dict Word
     * @description ユーザー辞書に言葉を追加します。
     */
    post: operations['add_user_dict_word'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/user_dict_word/{word_uuid}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Rewrite User Dict Word
     * @description ユーザー辞書に登録されている言葉を更新します。
     */
    put: operations['rewrite_user_dict_word'];
    post?: never;
    /**
     * Delete User Dict Word
     * @description ユーザー辞書に登録されている言葉を削除します。
     */
    delete: operations['delete_user_dict_word'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/validate_kana': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * テキストがAquesTalk 風記法に従っているか判定する
     * @description テキストがAquesTalk 風記法に従っているかどうかを判定します。
     *
     *     従っていない場合はエラーが返ります。
     */
    post: operations['validate_kana'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/version': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Version
     * @description エンジンのバージョンを取得します。
     */
    get: operations['version'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * AccentPhrase
     * @description アクセント句ごとの情報。
     */
    AccentPhrase: {
      /**
       * Accent
       * @description アクセント箇所
       */
      accent: number;
      /**
       * Is Interrogative
       * @description 疑問系かどうか
       * @default false
       */
      is_interrogative: boolean;
      /**
       * Moras
       * @description モーラのリスト
       */
      moras: components['schemas']['Mora'][];
      /**
       * Pause Mora
       * @description アクセント句の末尾につく無音モーラ。null の場合は無音モーラを付けない。
       */
      pause_mora?: components['schemas']['Mora'];
    };
    /**
     * AudioQuery
     * @description 音声合成用のクエリ。
     */
    AudioQuery: {
      /**
       * Accent Phrases
       * @description アクセント句のリスト
       */
      accent_phrases: components['schemas']['AccentPhrase'][];
      /**
       * Intonationscale
       * @description 全体の抑揚
       */
      intonationScale: number;
      /**
       * Kana
       * @description [読み取り専用]AquesTalk 風記法によるテキスト。音声合成用のクエリとしては無視される
       */
      kana?: string;
      /**
       * Outputsamplingrate
       * @description 音声データの出力サンプリングレート
       */
      outputSamplingRate: number;
      /**
       * Outputstereo
       * @description 音声データをステレオ出力するか否か
       */
      outputStereo: boolean;
      /**
       * Pauselength
       * @description 句読点などの無音時間。nullのときは無視される。デフォルト値はnull
       */
      pauseLength?: number | null;
      /**
       * Pauselengthscale
       * @description 句読点などの無音時間（倍率）。デフォルト値は1
       * @default 1
       */
      pauseLengthScale: number;
      /**
       * Pitchscale
       * @description 全体の音高
       */
      pitchScale: number;
      /**
       * Postphonemelength
       * @description 音声の後の無音時間
       */
      postPhonemeLength: number;
      /**
       * Prephonemelength
       * @description 音声の前の無音時間
       */
      prePhonemeLength: number;
      /**
       * Speedscale
       * @description 全体の話速
       */
      speedScale: number;
      /**
       * Volumescale
       * @description 全体の音量
       */
      volumeScale: number;
    };
    /**
     * BaseLibraryInfo
     * @description 音声ライブラリの情報。
     */
    BaseLibraryInfo: {
      /**
       * Bytes
       * @description 音声ライブラリのバイト数
       */
      bytes: number;
      /**
       * Download Url
       * @description 音声ライブラリのダウンロードURL
       */
      download_url: string;
      /**
       * Name
       * @description 音声ライブラリの名前
       */
      name: string;
      /**
       * Speakers
       * @description 音声ライブラリに含まれるキャラクターのリスト
       */
      speakers: components['schemas']['LibrarySpeaker'][];
      /**
       * Uuid
       * @description 音声ライブラリのUUID
       */
      uuid: string;
      /**
       * Version
       * @description 音声ライブラリのバージョン
       */
      version: string;
    };
    /** Body_setting_post_setting_post */
    Body_setting_post_setting_post: {
      /** Allow Origin */
      allow_origin?: string;
      cors_policy_mode: components['schemas']['CorsPolicyMode'];
    };
    /** Body_sing_frame_f0_sing_frame_f0_post */
    Body_sing_frame_f0_sing_frame_f0_post: {
      frame_audio_query: components['schemas']['FrameAudioQuery'];
      score: components['schemas']['Score'];
    };
    /** Body_sing_frame_volume_sing_frame_volume_post */
    Body_sing_frame_volume_sing_frame_volume_post: {
      frame_audio_query: components['schemas']['FrameAudioQuery'];
      score: components['schemas']['Score'];
    };
    /**
     * CorsPolicyMode
     * @description CORSの許可モード。
     * @enum {string}
     */
    CorsPolicyMode: 'all' | 'localapps';
    /**
     * DownloadableLibraryInfo
     * @description ダウンロード可能な音声ライブラリの情報。
     */
    DownloadableLibraryInfo: {
      /**
       * Bytes
       * @description 音声ライブラリのバイト数
       */
      bytes: number;
      /**
       * Download Url
       * @description 音声ライブラリのダウンロードURL
       */
      download_url: string;
      /**
       * Name
       * @description 音声ライブラリの名前
       */
      name: string;
      /**
       * Speakers
       * @description 音声ライブラリに含まれるキャラクターのリスト
       */
      speakers: components['schemas']['LibrarySpeaker'][];
      /**
       * Uuid
       * @description 音声ライブラリのUUID
       */
      uuid: string;
      /**
       * Version
       * @description 音声ライブラリのバージョン
       */
      version: string;
    };
    /**
     * EngineManifest
     * @description エンジン自体に関する情報。
     */
    EngineManifest: {
      /**
       * Brand Name
       * @description ブランド名
       */
      brand_name: string;
      /**
       * Default Sampling Rate
       * @description デフォルトのサンプリング周波数
       */
      default_sampling_rate: number;
      /**
       * Dependency Licenses
       * @description 依存関係のライセンス情報
       */
      dependency_licenses: components['schemas']['LicenseInfo'][];
      /**
       * Frame Rate
       * @description エンジンのフレームレート
       */
      frame_rate: number;
      /**
       * Icon
       * @description エンジンのアイコンをBASE64エンコードしたもの
       */
      icon: string;
      /**
       * Manifest Version
       * @description マニフェストのバージョン
       */
      manifest_version: string;
      /**
       * Name
       * @description エンジン名
       */
      name: string;
      /** @description エンジンが持つ機能 */
      supported_features: components['schemas']['SupportedFeatures'];
      /**
       * Supported Vvlib Manifest Version
       * @description エンジンが対応するvvlibのバージョン
       */
      supported_vvlib_manifest_version?: string;
      /**
       * Terms Of Service
       * @description エンジンの利用規約
       */
      terms_of_service: string;
      /**
       * Update Infos
       * @description エンジンのアップデート情報
       */
      update_infos: components['schemas']['UpdateInfo'][];
      /**
       * Url
       * @description エンジンのURL
       */
      url: string;
      /**
       * Uuid
       * @description エンジンのUUID
       */
      uuid: string;
    };
    /**
     * FrameAudioQuery
     * @description フレームごとの音声合成用のクエリ。
     */
    FrameAudioQuery: {
      /**
       * F0
       * @description フレームごとの基本周波数
       */
      f0: number[];
      /**
       * Outputsamplingrate
       * @description 音声データの出力サンプリングレート
       */
      outputSamplingRate: number;
      /**
       * Outputstereo
       * @description 音声データをステレオ出力するか否か
       */
      outputStereo: boolean;
      /**
       * Phonemes
       * @description 音素のリスト
       */
      phonemes: components['schemas']['FramePhoneme'][];
      /**
       * Volume
       * @description フレームごとの音量
       */
      volume: number[];
      /**
       * Volumescale
       * @description 全体の音量
       */
      volumeScale: number;
    };
    /**
     * FramePhoneme
     * @description 音素の情報。
     */
    FramePhoneme: {
      /**
       * Frame Length
       * @description 音素のフレーム長
       */
      frame_length: number;
      /**
       * Note Id
       * @description 音符のID
       */
      note_id?: string | null;
      /**
       * Phoneme
       * @description 音素
       */
      phoneme: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][];
    };
    /**
     * InstalledLibraryInfo
     * @description インストール済み音声ライブラリの情報。
     */
    InstalledLibraryInfo: {
      /**
       * Bytes
       * @description 音声ライブラリのバイト数
       */
      bytes: number;
      /**
       * Download Url
       * @description 音声ライブラリのダウンロードURL
       */
      download_url: string;
      /**
       * Name
       * @description 音声ライブラリの名前
       */
      name: string;
      /**
       * Speakers
       * @description 音声ライブラリに含まれるキャラクターのリスト
       */
      speakers: components['schemas']['LibrarySpeaker'][];
      /**
       * Uninstallable
       * @description アンインストール可能かどうか
       */
      uninstallable: boolean;
      /**
       * Uuid
       * @description 音声ライブラリのUUID
       */
      uuid: string;
      /**
       * Version
       * @description 音声ライブラリのバージョン
       */
      version: string;
    };
    /**
     * LibrarySpeaker
     * @description 音声ライブラリに含まれるキャラクターの情報。
     */
    LibrarySpeaker: {
      speaker: components['schemas']['Speaker'];
      speaker_info: components['schemas']['SpeakerInfo'];
    };
    /**
     * LicenseInfo
     * @description 依存ライブラリのライセンス情報。
     */
    LicenseInfo: {
      /**
       * License
       * @description 依存ライブラリのライセンス名
       */
      license?: string;
      /**
       * Name
       * @description 依存ライブラリ名
       */
      name: string;
      /**
       * Text
       * @description 依存ライブラリのライセンス本文
       */
      text: string;
      /**
       * Version
       * @description 依存ライブラリのバージョン
       */
      version?: string;
    };
    /**
     * Mora
     * @description モーラ（子音＋母音）ごとの情報。
     */
    Mora: {
      /**
       * Consonant
       * @description 子音の音素
       */
      consonant?: string;
      /**
       * Consonant Length
       * @description 子音の長さ
       */
      consonant_length?: number;
      /**
       * Pitch
       * @description 音高
       */
      pitch: number;
      /**
       * Text
       * @description 文字
       */
      text: string;
      /**
       * Vowel
       * @description 母音の音素
       */
      vowel: string;
      /**
       * Vowel Length
       * @description 母音の長さ
       */
      vowel_length: number;
    };
    /**
     * MorphableTargetInfo
     * @description モーフィング相手としての情報。
     */
    MorphableTargetInfo: {
      /**
       * Is Morphable
       * @description 指定したキャラクターに対してモーフィングの可否
       */
      is_morphable: boolean;
    };
    /**
     * Note
     * @description 音符ごとの情報。
     */
    Note: {
      /**
       * Frame Length
       * @description 音符のフレーム長
       */
      frame_length: number;
      /**
       * Id
       * @description ID
       */
      id?: string | null;
      /**
       * Key
       * @description 音階
       */
      key?: number;
      /**
       * Lyric
       * @description 音符の歌詞
       */
      lyric: string;
    };
    /**
     * ParseKanaBadRequest
     * @description 読み仮名のパースに失敗した。
     */
    ParseKanaBadRequest: {
      /**
       * Error Args
       * @description エラーを起こした箇所
       */
      error_args: {
        [key: string]: string;
      };
      /**
       * Error Name
       * @description エラー名
       *
       *     |name|description|
       *     |---|---|
       *     | UNKNOWN_TEXT | 判別できない読み仮名があります: {text} |
       *     | ACCENT_TOP | 句頭にアクセントは置けません: {text} |
       *     | ACCENT_TWICE | 1つのアクセント句に二つ以上のアクセントは置けません: {text} |
       *     | ACCENT_NOTFOUND | アクセントを指定していないアクセント句があります: {text} |
       *     | EMPTY_PHRASE | {position}番目のアクセント句が空白です |
       *     | INTERROGATION_MARK_NOT_AT_END | アクセント句末以外に「？」は置けません: {text} |
       *     | INFINITE_LOOP | 処理時に無限ループになってしまいました...バグ報告をお願いします。 |
       */
      error_name: string;
      /**
       * Text
       * @description エラーメッセージ
       */
      text: string;
    };
    /**
     * Preset
     * @description プリセット情報。
     */
    Preset: {
      /**
       * Id
       * @description プリセットID
       */
      id: number;
      /**
       * Intonationscale
       * @description 全体の抑揚
       */
      intonationScale: number;
      /**
       * Name
       * @description プリセット名
       */
      name: string;
      /**
       * Pauselength
       * @description 句読点などの無音時間
       */
      pauseLength?: number;
      /**
       * Pauselengthscale
       * @description 句読点などの無音時間（倍率）
       * @default 1
       */
      pauseLengthScale: number;
      /**
       * Pitchscale
       * @description 全体の音高
       */
      pitchScale: number;
      /**
       * Postphonemelength
       * @description 音声の後の無音時間
       */
      postPhonemeLength: number;
      /**
       * Prephonemelength
       * @description 音声の前の無音時間
       */
      prePhonemeLength: number;
      /**
       * Speaker Uuid
       * @description キャラクターのUUID
       */
      speaker_uuid: string;
      /**
       * Speedscale
       * @description 全体の話速
       */
      speedScale: number;
      /**
       * Style Id
       * @description スタイルID
       */
      style_id: number;
      /**
       * Volumescale
       * @description 全体の音量
       */
      volumeScale: number;
    };
    /**
     * Score
     * @description 楽譜情報。
     */
    Score: {
      /**
       * Notes
       * @description 音符のリスト
       */
      notes: components['schemas']['Note'][];
    };
    /**
     * Speaker
     * @description キャラクター情報
     */
    Speaker: {
      /**
       * Name
       * @description 名前
       */
      name: string;
      /**
       * Speaker Uuid
       * @description キャラクターのUUID
       */
      speaker_uuid: string;
      /**
       * Styles
       * @description スタイルの一覧
       */
      styles: components['schemas']['SpeakerStyle'][];
      /** @description キャラクターの対応機能 */
      supported_features?: components['schemas']['SpeakerSupportedFeatures'];
      /**
       * Version
       * @description キャラクターのバージョン
       */
      version: string;
    };
    /**
     * SpeakerInfo
     * @description キャラクターの追加情報
     */
    SpeakerInfo: {
      /**
       * Policy
       * @description policy.md
       */
      policy: string;
      /**
       * Portrait
       * @description 立ち絵画像をbase64エンコードしたもの、あるいはURL
       */
      portrait: string;
      /**
       * Style Infos
       * @description スタイルの追加情報
       */
      style_infos: components['schemas']['StyleInfo'][];
    };
    /**
     * SpeakerStyle
     * @description キャラクターのスタイル情報
     */
    SpeakerStyle: {
      /**
       * Id
       * @description スタイルID
       */
      id: number;
      /**
       * Name
       * @description スタイル名
       */
      name: string;
      /**
       * Type
       * @description スタイルの種類。talk:音声合成クエリの作成と音声合成が可能。singing_teacher:歌唱音声合成用のクエリの作成が可能。frame_decode:歌唱音声合成が可能。sing:歌唱音声合成用のクエリの作成と歌唱音声合成が可能。
       * @default talk
       * @enum {string}
       */
      type: 'talk' | 'singing_teacher' | 'frame_decode' | 'sing';
    };
    /**
     * SpeakerSupportedFeatures
     * @description キャラクターの対応機能の情報
     */
    SpeakerSupportedFeatures: {
      /**
       * Permitted Synthesis Morphing
       * @description モーフィング機能への対応。'ALL' は「全て許可」、'SELF_ONLY' は「同じキャラクター内でのみ許可」、'NOTHING' は「全て禁止」
       * @default ALL
       * @enum {string}
       */
      permitted_synthesis_morphing: 'ALL' | 'SELF_ONLY' | 'NOTHING';
    };
    /**
     * StyleInfo
     * @description スタイルの追加情報
     */
    StyleInfo: {
      /**
       * Icon
       * @description このスタイルのアイコンをbase64エンコードしたもの、あるいはURL
       */
      icon: string;
      /**
       * Id
       * @description スタイルID
       */
      id: number;
      /**
       * Portrait
       * @description このスタイルの立ち絵画像をbase64エンコードしたもの、あるいはURL
       */
      portrait?: string;
      /**
       * Voice Samples
       * @description サンプル音声をbase64エンコードしたもの、あるいはURL
       */
      voice_samples: string[];
    };
    /**
     * SupportedDevicesInfo
     * @description 対応しているデバイスの情報。
     */
    SupportedDevicesInfo: {
      /**
       * Cpu
       * @description CPUに対応しているか
       */
      cpu: boolean;
      /**
       * Cuda
       * @description CUDA(Nvidia GPU)に対応しているか
       */
      cuda: boolean;
      /**
       * Dml
       * @description DirectML(Nvidia GPU/Radeon GPU等)に対応しているか
       */
      dml: boolean;
    };
    /**
     * SupportedFeatures
     * @description エンジンが持つ機能の一覧。
     */
    SupportedFeatures: {
      /**
       * Adjust Intonation Scale
       * @description 全体の抑揚の調整
       */
      adjust_intonation_scale: boolean;
      /**
       * Adjust Mora Pitch
       * @description モーラごとの音高の調整
       */
      adjust_mora_pitch: boolean;
      /**
       * Adjust Pause Length
       * @description 句読点などの無音時間の調整
       */
      adjust_pause_length?: boolean;
      /**
       * Adjust Phoneme Length
       * @description 音素ごとの長さの調整
       */
      adjust_phoneme_length: boolean;
      /**
       * Adjust Pitch Scale
       * @description 全体の音高の調整
       */
      adjust_pitch_scale: boolean;
      /**
       * Adjust Speed Scale
       * @description 全体の話速の調整
       */
      adjust_speed_scale: boolean;
      /**
       * Adjust Volume Scale
       * @description 全体の音量の調整
       */
      adjust_volume_scale: boolean;
      /**
       * Apply Katakana English
       * @description 未知の英単語をカタカナ読みに変換
       */
      apply_katakana_english?: boolean;
      /**
       * Interrogative Upspeak
       * @description 疑問文の自動調整
       */
      interrogative_upspeak: boolean;
      /**
       * Manage Library
       * @description 音声ライブラリのインストール・アンインストール
       */
      manage_library?: boolean;
      /**
       * Return Resource Url
       * @description キャラクター情報のリソースをURLで返送
       */
      return_resource_url?: boolean;
      /**
       * Sing
       * @description 歌唱音声合成
       */
      sing?: boolean;
      /**
       * Synthesis Morphing
       * @description 2種類のスタイルでモーフィングした音声を合成
       */
      synthesis_morphing: boolean;
    };
    /**
     * UpdateInfo
     * @description エンジンのアップデート情報。
     */
    UpdateInfo: {
      /**
       * Contributors
       * @description 貢献者名
       */
      contributors?: string[];
      /**
       * Descriptions
       * @description アップデートの詳細についての説明
       */
      descriptions: string[];
      /**
       * Version
       * @description エンジンのバージョン名
       */
      version: string;
    };
    /**
     * UserDictWord
     * @description 辞書のコンパイルに使われる情報。
     */
    UserDictWord: {
      /**
       * Accent Associative Rule
       * @description アクセント結合規則
       */
      accent_associative_rule: string;
      /**
       * Accent Type
       * @description アクセント型
       */
      accent_type: number;
      /**
       * Context Id
       * @description 文脈ID
       * @default 1348
       */
      context_id: number;
      /**
       * Inflectional Form
       * @description 活用形
       */
      inflectional_form: string;
      /**
       * Inflectional Type
       * @description 活用型
       */
      inflectional_type: string;
      /**
       * Mora Count
       * @description モーラ数
       */
      mora_count?: number;
      /**
       * Part Of Speech
       * @description 品詞
       */
      part_of_speech: string;
      /**
       * Part Of Speech Detail 1
       * @description 品詞細分類1
       */
      part_of_speech_detail_1: string;
      /**
       * Part Of Speech Detail 2
       * @description 品詞細分類2
       */
      part_of_speech_detail_2: string;
      /**
       * Part Of Speech Detail 3
       * @description 品詞細分類3
       */
      part_of_speech_detail_3: string;
      /**
       * Priority
       * @description 優先度
       */
      priority: number;
      /**
       * Pronunciation
       * @description 発音
       */
      pronunciation: string;
      /**
       * Stem
       * @description 原形
       */
      stem: string;
      /**
       * Surface
       * @description 表層形
       */
      surface: string;
      /**
       * Yomi
       * @description 読み
       */
      yomi: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /**
     * VvlibManifest
     * @description vvlib(VOICEVOX Library)に関する情報。
     */
    VvlibManifest: {
      /**
       * Brand Name
       * @description エンジンのブランド名
       */
      brand_name: string;
      /**
       * Engine Name
       * @description エンジン名
       */
      engine_name: string;
      /**
       * Engine Uuid
       * @description エンジンのUUID
       */
      engine_uuid: string;
      /**
       * Manifest Version
       * @description マニフェストバージョン
       */
      manifest_version: string;
      /**
       * Name
       * @description 音声ライブラリ名
       */
      name: string;
      /**
       * Uuid
       * @description 音声ライブラリのUUID
       */
      uuid: string;
      /**
       * Version
       * @description 音声ライブラリバージョン
       */
      version: string;
    };
    /**
     * WordTypes
     * @description 品詞
     * @enum {string}
     */
    WordTypes: 'PROPER_NOUN' | 'COMMON_NOUN' | 'VERB' | 'ADJECTIVE' | 'SUFFIX';
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  get_portal_page: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'text/html': string;
        };
      };
    };
  };
  accent_phrases: {
    parameters: {
      query: {
        text: string;
        speaker: number;
        is_kana?: boolean;
        enable_katakana_english?: boolean;
        core_version?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AccentPhrase'][];
        };
      };
      /** @description 読み仮名のパースに失敗 */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ParseKanaBadRequest'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  add_preset: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Preset'];
      };
    };
    responses: {
      /** @description 追加したプリセットのプリセットID */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': number;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  audio_query: {
    parameters: {
      query: {
        text: string;
        speaker: number;
        enable_katakana_english?: boolean;
        core_version?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AudioQuery'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  audio_query_from_preset: {
    parameters: {
      query: {
        text: string;
        preset_id: number;
        enable_katakana_english?: boolean;
        core_version?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AudioQuery'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  cancellable_synthesis: {
    parameters: {
      query: {
        speaker: number;
        enable_interrogative_upspeak?: boolean;
        core_version?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AudioQuery'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'audio/wav': string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  connect_waves: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': string[];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'audio/wav': string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  core_versions: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string[];
        };
      };
    };
  };
  delete_preset: {
    parameters: {
      query: {
        /** @description 削除するプリセットのプリセットID */
        id: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  downloadable_libraries: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description ダウンロード可能な音声ライブラリの情報リスト */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DownloadableLibraryInfo'][];
        };
      };
    };
  };
  engine_manifest: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['EngineManifest'];
        };
      };
    };
  };
  frame_synthesis: {
    parameters: {
      query: {
        speaker: number;
        core_version?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FrameAudioQuery'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'audio/wav': string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  import_user_dict_words: {
    parameters: {
      query: {
        /** @description 重複したエントリがあった場合、上書きするかどうか */
        override: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': {
          [key: string]: components['schemas']['UserDictWord'];
        };
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  initialize_speaker: {
    parameters: {
      query: {
        speaker: number;
        /** @description 既に初期化済みのスタイルの再初期化をスキップするかどうか */
        skip_reinit?: boolean;
        core_version?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  install_library: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 音声ライブラリのID */
        library_uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  installed_libraries: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description インストールした音声ライブラリの情報 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            [key: string]: components['schemas']['InstalledLibraryInfo'];
          };
        };
      };
    };
  };
  is_initialized_speaker: {
    parameters: {
      query: {
        speaker: number;
        core_version?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': boolean;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  mora_data: {
    parameters: {
      query: {
        speaker: number;
        core_version?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AccentPhrase'][];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AccentPhrase'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  mora_length: {
    parameters: {
      query: {
        speaker: number;
        core_version?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AccentPhrase'][];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AccentPhrase'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  mora_pitch: {
    parameters: {
      query: {
        speaker: number;
        core_version?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AccentPhrase'][];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AccentPhrase'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  morphable_targets: {
    parameters: {
      query?: {
        core_version?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': number[];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            [key: string]: components['schemas']['MorphableTargetInfo'];
          }[];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  multi_synthesis: {
    parameters: {
      query: {
        speaker: number;
        /** @description 疑問系のテキストが与えられたら語尾を自動調整する */
        enable_interrogative_upspeak?: boolean;
        core_version?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AudioQuery'][];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/zip': string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_presets: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description プリセットのリスト */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Preset'][];
        };
      };
    };
  };
  setting_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  setting_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/x-www-form-urlencoded': components['schemas']['Body_setting_post_setting_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  sing_frame_audio_query: {
    parameters: {
      query: {
        speaker: number;
        core_version?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Score'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FrameAudioQuery'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  sing_frame_f0: {
    parameters: {
      query: {
        speaker: number;
        core_version?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Body_sing_frame_f0_sing_frame_f0_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': number[];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  sing_frame_volume: {
    parameters: {
      query: {
        speaker: number;
        core_version?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Body_sing_frame_volume_sing_frame_volume_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': number[];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  singer_info: {
    parameters: {
      query: {
        speaker_uuid: string;
        resource_format?: 'base64' | 'url';
        core_version?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SpeakerInfo'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  singers: {
    parameters: {
      query?: {
        core_version?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Speaker'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  speaker_info: {
    parameters: {
      query: {
        speaker_uuid: string;
        resource_format?: 'base64' | 'url';
        core_version?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SpeakerInfo'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  speakers: {
    parameters: {
      query?: {
        core_version?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Speaker'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  supported_devices: {
    parameters: {
      query?: {
        core_version?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SupportedDevicesInfo'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  synthesis: {
    parameters: {
      query: {
        speaker: number;
        /** @description 疑問系のテキストが与えられたら語尾を自動調整する */
        enable_interrogative_upspeak?: boolean;
        core_version?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AudioQuery'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'audio/wav': string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  _synthesis_morphing: {
    parameters: {
      query: {
        base_speaker: number;
        target_speaker: number;
        morph_rate: number;
        /** @description 疑問系のテキストが与えられたら語尾を自動調整する */
        enable_interrogative_upspeak?: boolean;
        core_version?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AudioQuery'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'audio/wav': string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  uninstall_library: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 音声ライブラリのID */
        library_uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_preset: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Preset'];
      };
    };
    responses: {
      /** @description 更新したプリセットのプリセットID */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': number;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_user_dict_words: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 単語のUUIDとその詳細 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            [key: string]: components['schemas']['UserDictWord'];
          };
        };
      };
    };
  };
  add_user_dict_word: {
    parameters: {
      query: {
        /** @description 言葉の表層形 */
        surface: string;
        /** @description 言葉の発音（カタカナ） */
        pronunciation: string;
        /** @description アクセント型（音が下がる場所を指す） */
        accent_type: number;
        /** @description PROPER_NOUN（固有名詞）、COMMON_NOUN（普通名詞）、VERB（動詞）、ADJECTIVE（形容詞）、SUFFIX（語尾）のいずれか */
        word_type?: components['schemas']['WordTypes'];
        /** @description 単語の優先度（0から10までの整数）。数字が大きいほど優先度が高くなる。1から9までの値を指定することを推奨 */
        priority?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  rewrite_user_dict_word: {
    parameters: {
      query: {
        /** @description 言葉の表層形 */
        surface: string;
        /** @description 言葉の発音（カタカナ） */
        pronunciation: string;
        /** @description アクセント型（音が下がる場所を指す） */
        accent_type: number;
        /** @description PROPER_NOUN（固有名詞）、COMMON_NOUN（普通名詞）、VERB（動詞）、ADJECTIVE（形容詞）、SUFFIX（語尾）のいずれか */
        word_type?: components['schemas']['WordTypes'];
        /** @description 単語の優先度（0から10までの整数）。数字が大きいほど優先度が高くなる。1から9までの値を指定することを推奨。 */
        priority?: number;
      };
      header?: never;
      path: {
        /** @description 更新する言葉のUUID */
        word_uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_user_dict_word: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 削除する言葉のUUID */
        word_uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  validate_kana: {
    parameters: {
      query: {
        /** @description 判定する対象の文字列 */
        text: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': boolean;
        };
      };
      /** @description テキストが不正です */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ParseKanaBadRequest'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  version: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
    };
  };
}
