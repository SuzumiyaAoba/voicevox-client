name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # v1.0.0, v0.1.0 etc.
      - 'v*.*.*-*'  # v1.0.0-alpha.1, v1.0.0-beta.1 etc.

permissions:
  contents: read
  id-token: write # for npm provenance

jobs:
  release:
    name: Release to NPM
    runs-on: ubuntu-latest
    env:
      ROLLUP_SKIP_NODEJS_NATIVE: '1'
      CI: 'true'
    environment: release # 保護された環境を使用
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm install
        
      - name: Generate API types
        run: npm run generate
        
      - name: Run security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
        
      - name: Run all tests
        run: npm run test:run
        
      - name: Run linter
        run: npm run check
        
      - name: Build package
        run: npm run build:dual
        
      - name: Verify package contents
        run: |
          npm pack --dry-run
          ls -la dist/
          
      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version to publish: $VERSION"
          
      - name: Update package version
        run: |
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version
          echo "Updated package.json version to ${{ steps.version.outputs.version }}"
          
      - name: Publish to NPM with provenance
        run: |
          echo "Publishing package with provenance..."
          npm publish --provenance --access public
          echo "✅ Package successfully published to npm!"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: |
            ## 🚀 Release v${{ steps.version.outputs.version }}
            
            ### 📦 Installation
            
            ```bash
            npm install @suzumiyaaoba/voicevox-client@${{ steps.version.outputs.version }}
            ```
            
            ### 📋 Package Information
            
            - **Package**: [@suzumiyaaoba/voicevox-client](https://www.npmjs.com/package/@suzumiyaaoba/voicevox-client)
            - **Version**: ${{ steps.version.outputs.version }}
            - **Published**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            - **Node.js Support**: >= 18.0.0
            
            ### 🔒 Security & Verification
            
            This package was published with npm provenance for enhanced security:
            
            ```bash
            # Verify package signatures
            npm audit signatures
            
            # View package information
            npm view @suzumiyaaoba/voicevox-client@${{ steps.version.outputs.version }}
            ```
            
            ### 📖 Documentation
            
            - [README](https://github.com/${{ github.repository }}#readme)
            - [API Documentation](https://github.com/${{ github.repository }}/tree/main/api-schema)
            - [Examples](https://github.com/${{ github.repository }}#使用方法)
            
            ---
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 HEAD^)...v${{ steps.version.outputs.version }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}
          generate_release_notes: true

  post-release:
    name: Post-release checks
    needs: release
    runs-on: ubuntu-latest
    
    steps:
      - name: Wait for package to be available
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Waiting for package @suzumiyaaoba/voicevox-client@$VERSION to be available..."
          
          # NPM公開後の反映を待つ
          sleep 60
          
          # パッケージの存在確認
          if npm view @suzumiyaaoba/voicevox-client@$VERSION > /dev/null 2>&1; then
            echo "✅ Package successfully published and available!"
          else
            echo "❌ Package not found on NPM registry"
            exit 1
          fi
          
      - name: Test installation and imports
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Testing installation of @suzumiyaaoba/voicevox-client@$VERSION"
          
          # 一時的なテスト環境作成
          mkdir -p test-install
          cd test-install
          npm init -y
          
          # パッケージインストール（リトライ機能付き）
          for i in {1..3}; do
            echo "Attempt $i: Installing package..."
            if npm install @suzumiyaaoba/voicevox-client@$VERSION; then
              echo "✅ Package installation successful on attempt $i"
              break
            else
              echo "❌ Installation failed on attempt $i"
              if [ $i -eq 3 ]; then
                echo "❌ All installation attempts failed"
                exit 1
              fi
              sleep 10
            fi
          done
          
          # パッケージ情報確認
          npm list @suzumiyaaoba/voicevox-client
          
          # CommonJS インポートテスト
          node -e "
            try {
              const client = require('@suzumiyaaoba/voicevox-client');
              console.log('✅ CommonJS import successful');
              const exports = Object.keys(client);
              console.log('Available exports count:', exports.length);
              console.log('Sample exports:', exports.slice(0, 5).join(', '));
              
              // 主要な関数の存在確認
              if (typeof client.speakers === 'function') {
                console.log('✅ speakers function available');
              }
              if (typeof client.audioQuery === 'function') {
                console.log('✅ audioQuery function available');
              }
            } catch (error) {
              console.error('❌ CommonJS import failed:', error.message);
              process.exit(1);
            }
          "
          
          # ESM インポートテスト
          node --input-type=module -e "
            import('@suzumiyaaoba/voicevox-client').then(client => {
              console.log('✅ ESM import successful');
              const exports = Object.keys(client);
              console.log('Available exports count:', exports.length);
              console.log('Sample exports:', exports.slice(0, 5).join(', '));
              
              // 主要な関数の存在確認
              if (typeof client.speakers === 'function') {
                console.log('✅ speakers function available (ESM)');
              }
              if (typeof client.audioQuery === 'function') {
                console.log('✅ audioQuery function available (ESM)');
              }
            }).catch(error => {
              console.error('❌ ESM import failed:', error.message);
              process.exit(1);
            });
          "
          
          # 型定義ファイル確認
          if [ -f node_modules/@suzumiyaaoba/voicevox-client/dist/index.d.ts ]; then
            echo "✅ TypeScript definitions found"
          else
            echo "❌ TypeScript definitions missing"
            exit 1
          fi
          
          echo "🎉 All installation tests passed!"
